{"version":3,"sources":["components/ContactForm.jsx","config/firebase.js","components/Contacts.jsx","App.js","serviceWorker.js","index.js"],"names":["ContactForm","props","initialState","fullName","mobile","email","address","useState","values","setValues","useEffect","currentId","contactObjects","handleInputChange","event","target","name","value","autoComplete","onSubmit","preventDefault","addOrEdit","className","placeholder","onChange","type","firebaseObject","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","ref","Contacts","setContactObjects","setCurrentId","firebaseDatabase","child","on","snapshot","val","Fragment","object","push","error","console","log","set","Object","keys","map","id","key","onClick","handleEdit","window","confirm","remove","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e7182464.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst ContactForm = (props) => {\r\n\r\n    const initialState = {\r\n        fullName: \"\",\r\n        mobile: \"\",\r\n        email: \"\",\r\n        address: \"\"\r\n    };\r\n\r\n    const [ values, setValues ] = useState(initialState);\r\n\r\n    useEffect(() => {\r\n        if (props.currentId === \"\") {\r\n            setValues({\r\n                ...initialState\r\n            });\r\n        } else {\r\n            setValues({\r\n                ...props.contactObjects[props.currentId]\r\n            });\r\n        }\r\n    }, [ props.currentId, props.contactObjects ]);\r\n\r\n    const handleInputChange = (event) => {\r\n        const { name, value } = event.target;\r\n        setValues({\r\n            ...values,\r\n            [ name ]: value\r\n        });\r\n    };\r\n\r\n    const handleFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        props.addOrEdit(values);\r\n    };\r\n\r\n    return (\r\n        <form autoComplete=\"off\" onSubmit={ handleFormSubmit }>\r\n            <div className=\"form-group input-group\">\r\n                <div className=\"input-group-prepend\">\r\n                    <div className=\"input-group-text\">\r\n                        <i className=\"fas fa-user\"></i>\r\n                    </div>\r\n                </div>\r\n                <input className=\"form-control\" placeholder=\"Full Name\" name=\"fullName\" value={ values.fullName } onChange={ handleInputChange } />\r\n            </div>\r\n            <div className=\"form-row\">\r\n                <div className=\"form-group input-group col-md-6\">\r\n                    <div className=\"input-group-prepend\">\r\n                        <div className=\"input-group-text\">\r\n                            <i className=\"fas fa-mobile-alt\"></i>\r\n                        </div>\r\n                    </div>\r\n                    <input className=\"form-control\" placeholder=\"Mobie\" name=\"mobile\" value={ values.mobile } onChange={ handleInputChange } />\r\n                </div>\r\n                <div className=\"form-group input-group col-md-6\">\r\n                    <div className=\"input-group-prepend\">\r\n                        <div className=\"input-group-text\">\r\n                            <i className=\"fas fa-envelope\"></i>\r\n                        </div>\r\n                    </div>\r\n                    <input className=\"form-control\" placeholder=\"Email\" name=\"email\" value={ values.email } onChange={ handleInputChange } />\r\n                </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <textarea className=\"form-control\" placeholder=\"Address\" name=\"address\" value={ values.address } onChange={ handleInputChange } />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <input className=\"btn btn-primary btn-block\" type=\"submit\" value={ props.currentId === \"\" ? \"Save\" : \"Update\" } />\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n \r\nexport default ContactForm;","import * as firebase from \"firebase\";\r\n\r\n/*\r\n<!-- The core Firebase JS SDK is always required and must be listed first -->\r\n<script src=\"https://www.gstatic.com/firebasejs/7.14.0/firebase-app.js\"></script>\r\n\r\n<!-- TODO: Add SDKs for Firebase products that you want to use\r\n     https://firebase.google.com/docs/web/setup#available-libraries -->\r\n<script src=\"https://www.gstatic.com/firebasejs/7.14.0/firebase-analytics.js\"></script>\r\n\r\n<script>\r\n  // Your web app's Firebase configuration\r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyCYX9LRwby4lMh2SHYV0Ah-De0JgVxBIqg\",\r\n    authDomain: \"benion-database.firebaseapp.com\",\r\n    databaseURL: \"https://benion-database.firebaseio.com\",\r\n    projectId: \"benion-database\",\r\n    storageBucket: \"benion-database.appspot.com\",\r\n    messagingSenderId: \"391934444954\",\r\n    appId: \"1:391934444954:web:8c014487b17dcce8b26623\",\r\n    measurementId: \"G-9PBZGWNL1W\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  firebase.analytics();\r\n</script>\r\n*/\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCYX9LRwby4lMh2SHYV0Ah-De0JgVxBIqg\",\r\n    authDomain: \"benion-database.firebaseapp.com\",\r\n    databaseURL: \"https://benion-database.firebaseio.com\",\r\n    projectId: \"benion-database\",\r\n    storageBucket: \"benion-database.appspot.com\",\r\n    messagingSenderId: \"391934444954\",\r\n    appId: \"1:391934444954:web:8c014487b17dcce8b26623\",\r\n    measurementId: \"G-9PBZGWNL1W\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst firebaseObject = firebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebaseObject.database().ref();","import React, { useState, useEffect } from \"react\";\r\nimport ContactForm from \"./ContactForm\";\r\nimport firebaseDatabase from \"../config/firebase\";\r\n\r\nconst Contacts = () => {\r\n\r\n    const [ contactObjects, setContactObjects ] = useState({});\r\n    const [ currentId, setCurrentId ] = useState(\"\");\r\n    \r\n    useEffect(() => {\r\n        firebaseDatabase.child(\"crudContacts\").on(\"value\", snapshot => {\r\n            if (snapshot.val() !== null) {\r\n                setContactObjects({\r\n                    ...snapshot.val()\r\n                });\r\n            } else {\r\n                setContactObjects({});\r\n            }\r\n        });\r\n    }, []); // Similar To componentDidMount()\r\n\r\n    const addOrEdit = (object) => {\r\n        if (currentId === \"\") {\r\n            firebaseDatabase.child(\"crudContacts\").push(object, error => {\r\n                if (error) {\r\n                    console.log(error);\r\n                } else {\r\n                    setCurrentId(\"\");\r\n                }\r\n            });\r\n        } else {\r\n            firebaseDatabase.child(`crudContacts/${ currentId }`).set(object, error => {\r\n                if (error) {\r\n                    console.log(error);\r\n                } else {\r\n                    setCurrentId(\"\");\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleEdit = (id) => {\r\n        setCurrentId(id);\r\n    };\r\n\r\n    const handleDelete = (key) => {\r\n        if (window.confirm(\"Are You Sure You Want to Remove This Record..?\")) {\r\n            firebaseDatabase.child(`crudContacts/${ key }`).remove(error => {\r\n                if (error) {\r\n                    console.log(error);\r\n                } else {\r\n                    setCurrentId(\"\");\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"jumbotron jumbotron-fluid\">\r\n        <div className=\"container\">\r\n          <h1 className=\"display-4 text-center\">Benion Contact Register</h1>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-5\">\r\n          <ContactForm { ...({ addOrEdit, currentId, contactObjects }) } />\r\n        </div>\r\n        <div className=\"col-md-7\">\r\n            <table className=\"table table-borderless table-stripped\">\r\n                <thead className=\"thead-light\">\r\n                    <tr>\r\n                        <th>Full Name</th>\r\n                        <th>Mobile</th>\r\n                        <th>Email</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        Object.keys(contactObjects).map(id => {\r\n                            return <tr key={ id }>\r\n                                <td>{ contactObjects[id].fullName }</td>\r\n                                <td>{ contactObjects[id].mobile }</td>\r\n                                <td>{ contactObjects[id].email }</td>\r\n                                <td>\r\n                                    <a className=\"btn btn-primary\" onClick={ () => { handleEdit(id) } }>\r\n                                        <i className=\"fas fa-pencil-alt\"></i>\r\n                                    </a>\r\n                                    <a className=\"btn btn-danger\" onClick={ () => { handleDelete(id) } }>\r\n                                        <i className=\"fas fa-trash-alt\"></i>\r\n                                    </a>\r\n                                </td>\r\n                            </tr>\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Contacts;\r\n","import React from 'react';\nimport './App.css';\nimport Contacts from './components/Contacts';\n\nfunction App() {\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-8 offset-md-2\">\n        <Contacts />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}